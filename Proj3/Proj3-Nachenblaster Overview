Proj3-Nachenblaster Brief Overview

This C++ project is a simple spaceship shooting game. My assignment was to develop the "StudentWorld" class to orchestrate all game play and design the implementations for all game characters. Detailed description of my contribution can be found in the files "StudentWorld.h", "StudentWorld.cpp", "Actor.h", and "Actor.cpp" and is also listed in "report.docx".

Game Details:
The main characters in the game are:
The player (Nachenblaster)
Enemy ships (Smallgon, Smoregon, and Snagglegon)
Projectiles (Cabbage, Turnip, Flatulence Torpedo)
Goodies (Extra Life, Repair)

At the beginning of each level, the player has three lives. The player has to avoid colliding with enemy ships' projectile and destroy enough ships in order to advance to next level, with each level being increasingly more difficult. Nachenblaster can destroy enemy ship by either firing projectile or colliding directly with them, with the latter causing Nachenblaster to incur significant damage. By default, Nachenblaster fires cabbages toward the enemies. If it obtained flatulence torpedoes from Smoregon however (details below), Nachenblaster can also fire flatulence torpedo, which causes greater damage on the enemy.

For the enemy ships, Smallgon and Smoregon fire turnips. When a Smoregon is destroyed, there's a 1/3 chance it will drop a goodie (repair kits or flatulence torpedo). As for Snagglegon, it fires flatulence torpedo at Nachenblaster, making it more dangerous than Smallgon and Smoregon. A destroyed Snagglegon have a 1/6 chance of dropping an extra life goodie for the player to catch.

StudentWorld Class:
The StudentWorld class is derived from the provided "GameWorld" class. My job is to implement the following functions:

virtual int init(); 
    
virtual int move(); 
    
virtual void cleanUp();


in StudentWorld.cpp.

StudentWorld initializes the game world when the game starts and ensures proper appearance and removal of each object (ex: projectiles, explosions, enemyship, etc) during each tick of the game. It obtains player's input and displays the result of the player's move by ticks using provided functions from the GameWorld class.

Actor Class:
The Actor class is derived from the provided "GraphObject" class with the following methods:
	
double getX() const; 
    
double getY() const; 
    
void moveTo(double x, double y); 
    
int getDirection() const; 
    
void setDirection(int d); 
    
void setSize(double size); 
    
double getSize() const;
    
double getRadius() const; 


I designed the Actor class as an abstract base class so that all game objects can be derived from this class. The Actor class contains the following functions:
virtual void doSomething() = 0; //set "Actor" as an Abstract Base Class (ABC)

virtual bool isAliens() const; //check if the actor is an alien/enemy ship (smallgon, smoregon, snagglegon)

bool alive() const; 
//check if actor is still alive

void setDead(); 
//if the actor died, set itself dead

virtual void sufferDamage(double amt, int cause); 
//for actors that cannot suffer damage, the function simply return and do nothing

bool isInBound(double x, double y) const; 
//checks if the actor went offscreen

StudentWorld* getWorld(); 
//returns a pointer to the world the actor lives in


The functionality of each game object differs depending its nature (i.e. whether the object suffers damage, fires attack, makes sound, etc), and their detailed implementation can be found in the aforementioned files.
